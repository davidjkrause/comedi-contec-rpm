From 27455e5762580e4a9539d4d34fc0de2c106e0944 Mon Sep 17 00:00:00 2001
From: David Krause <david.krause@gmail.com>
Date: Mon, 13 Feb 2017 12:25:37 -0600
Subject: [PATCH] Add fit_demo and fit_demo2 to comedilib

---
 demo/Makefile.am | 10 ++++++-
 demo/fit_demo.c  | 61 ++++++++++++++++++++++++++++++++++++++++
 demo/fit_demo2.c | 84 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 154 insertions(+), 1 deletion(-)
 create mode 100644 demo/fit_demo.c
 create mode 100644 demo/fit_demo2.c

diff --git a/demo/Makefile.am b/demo/Makefile.am
index 8e87f2b..dfe18ad 100644
--- a/demo/Makefile.am
+++ b/demo/Makefile.am
@@ -1,7 +1,7 @@
 
 noinst_PROGRAMS = \
 	antialias ao_waveform ao_mmap apply_cal board_info choose_clock choose_filter \
-	choose_routing cmd do_waveform dio eeprom_dump gpct_buffered_counting \
+	choose_routing cmd do_waveform dio fit_demo fit_demo2 eeprom_dump gpct_buffered_counting \
 	gpct_encoder gpct_pulse_generator \
 	gpct_simple_counting inp inpn insn ledclock \
 	mmap outp poll receiver select pwm \
@@ -49,6 +49,14 @@ dio_SOURCES = dio.c common.c
 dio_CFLAGS = $(COMEDILIB_CFLAGS)
 dio_LDADD = $(COMEDILIB_LIBS)
 
+fit_demo_SOURCES = fit_demo.c common.c
+fit_demo_CFLAGS = $(COMEDILIB_CFLAGS)
+fit_demo_LDADD = $(COMEDILIB_LIBS)
+
+fit_demo2_SOURCES = fit_demo2.c common.c
+fit_demo2_CFLAGS = $(COMEDILIB_CFLAGS)
+fit_demo2_LDADD = $(COMEDILIB_LIBS)
+
 do_waveform_SOURCES = do_waveform.c common.c
 do_waveform_CFLAGS = $(COMEDILIB_CFLAGS)
 do_waveform_LDADD = $(COMEDILIB_LIBS)
diff --git a/demo/fit_demo.c b/demo/fit_demo.c
new file mode 100644
index 0000000..393b82e
--- /dev/null
+++ b/demo/fit_demo.c
@@ -0,0 +1,61 @@
+/*
+ * Digital I/O example
+ * Part of Comedilib
+ *
+ * Copyright (c) 1999,2000 David A. Schleef <ds@schleef.org>
+ *
+ * This file may be freely modified, distributed, and combined with
+ * other software, as long as proper attribution is given in the
+ * source code.
+ */
+/*
+ * Requirements:  A board with a digital I/O subdevice.  Not just
+ *    a 'digital input' or 'digital output' subdevice, but one in
+ *    which the channels can be configured between input and output.
+ */
+
+#include <stdio.h>
+#include <comedilib.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <stdlib.h>
+#include <errno.h>
+#include <getopt.h>
+#include <ctype.h>
+#include "examples.h"
+
+
+comedi_t *device;
+
+int main(int argc, char *argv[])
+{
+	struct parsed_options options;
+	comedi_insn insn[1];
+	lsampl_t t1[1];
+	int i;
+
+	insn[0].insn=INSN_READ;
+	insn[0].n = 1;
+	for(i = 0; i < 1; i++){
+		t1[i] = 0;
+	}
+	insn[0].data = t1;
+	insn[0].subdev = 0;
+	init_parsed_options(&options);
+	parse_options(&options, argc, argv);
+
+	device = comedi_open("/dev/comedi0");
+	if(!device){
+		comedi_perror("/dev/comedi0");
+		exit(-1);
+	}
+
+	for(i = 0; i < 4; i++){
+		insn[0].chanspec = i;
+		comedi_do_insn(device, &insn[0]);
+		printf("Analog Input Ch%d = %f[V]\n", i, (float)(20.0/65535.0 * t1[0] - 10.0));
+	}
+
+	return 0;
+}
+
diff --git a/demo/fit_demo2.c b/demo/fit_demo2.c
new file mode 100644
index 0000000..51ee951
--- /dev/null
+++ b/demo/fit_demo2.c
@@ -0,0 +1,84 @@
+/*
+ * Digital I/O example
+ * Part of Comedilib
+ *
+ * Copyright (c) 1999,2000 David A. Schleef <ds@schleef.org>
+ *
+ * This file may be freely modified, distributed, and combined with
+ * other software, as long as proper attribution is given in the
+ * source code.
+ */
+/*
+ * Requirements:  A board with a digital I/O subdevice.  Not just
+ *    a 'digital input' or 'digital output' subdevice, but one in
+ *    which the channels can be configured between input and output.
+ */
+
+#include <stdio.h>
+#include <comedilib.h>
+#include <fcntl.h>
+#include <unistd.h>
+#include <stdlib.h>
+#include <errno.h>
+#include <getopt.h>
+#include <ctype.h>
+#include "examples.h"
+#include <time.h>
+#include <sys/times.h>
+
+
+comedi_t *device;
+
+int main(int argc, char *argv[])
+{
+	struct parsed_options options;
+	comedi_insn insn[1];
+	lsampl_t t1[1];
+	int i;
+	struct timespec myTime;
+	double timer1, timer2;
+	int sampling_count;
+	int loop_count;
+
+	insn[0].insn=INSN_READ;
+	insn[0].n = 1;
+	for(i = 0; i < 1; i++){
+		t1[i] = 0;
+	}
+	insn[0].data = t1;
+	insn[0].subdev = 0;
+	init_parsed_options(&options);
+	parse_options(&options, argc, argv);
+
+	device = comedi_open("/dev/comedi0");
+	if(!device){
+		comedi_perror("/dev/comedi0");
+		exit(-1);
+	}
+
+	clock_gettime(CLOCK_MONOTONIC, &myTime);
+	timer1 = (double)myTime.tv_sec + (double)(myTime.tv_nsec / 1000000000.0);
+	sampling_count = 0;
+	loop_count = 0;
+	while(1){
+		for(i = 0; i < 4; i++){
+			insn[0].chanspec = i;
+			comedi_do_insn(device, &insn[0]);
+		}
+		sampling_count++;
+		clock_gettime(CLOCK_MONOTONIC, &myTime);
+		timer2 = (double)myTime.tv_sec + (double)(myTime.tv_nsec / 1000000000.0);
+		if((timer2 - timer1) > 1){
+			printf("SCAN RATE = %f[kHz]\n", (double)(0.001 / ((timer2 - timer1) / sampling_count)));
+			timer1 = timer2;
+			sampling_count = 0;
+			loop_count++;
+			if(loop_count > 9){
+				break;
+			}
+		}
+	}
+
+	return 0;
+}
+
-- 
1.8.3.1

